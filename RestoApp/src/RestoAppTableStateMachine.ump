namespace ca.mcgill.ecse223.resto.model;

class Table {
   status {
      Available {
         startOrder() / {
            new Order(new java.sql.Date(Calendar.getInstance().getTime().getTime()), new java.sql.Time(Calendar.getInstance().getTime().getTime()), this.getRestoApp(), this);
         } -> NothingOrdered;
         addToOrder(Order o) / {
            o.addTable(this);
         } -> NothingOrdered; 
      }
      NothingOrdered {
         orderItem(int quantity, Order o, Seat s, PricedMenuItem i) [quantityIsPositive(quantity)] / {
             OrderItem newOrder = new OrderItem(quantity, i , o , s);
            // create a new order item with the provided quantity, order, seat, and priced menu item
         } -> Ordered; 
         addToOrderItem(OrderItem i, Seat s) / {
             if(i != null && s != null)
                 s.addOrderItem(i);
            // add provided seat to provided order item unless seat has already been added, in which case nothing needs to be done
         } -> Ordered;
         endOrder(Order o) / {
            if (!o.removeTable(this)) {
               if (o.numberOfTables() == 1) {
                  o.delete();
               }
            }
         } -> Available;
      }
      Ordered {
         orderItem(int quantity, Order o, Seat s, PricedMenuItem i) [quantityIsPositive(quantity)] / {
             Seat[] seats =new Seat[1];
             seats[0]=s;
            OrderItem newOrder = new OrderItem(quantity, i , o , seats);
            // create a new order item with the provided quantity, order, seat, and priced menu item
         } -> Ordered; 
         addToOrderItem(OrderItem i, Seat s) / {
            if(i != null && s != null)
                s.addOrderItem(i);
            // add provided seat to provided order item unless seat has already been added, in which case nothing needs to be done
         } -> Ordered;
         cancelOrderItem(OrderItem i) [iIsLastItem(i)] / {
            if(i !=null)
                i.delete();
            // delete order item
         } -> NothingOrdered;
         cancelOrderItem(OrderItem i) [!iIsLastItem(i)] / {
            if(i !=null)
                i.delete();
            // delete order item
         } -> Ordered;
         cancelOrder() / {
            for(Order t : orders){
                 for(int i=0; i<t.getOrderItems().size(); i++) {
                	t.getOrderItem(i).delete();
                }
            }
            // delete all order items of the table
         } -> NothingOrdered;
         billForSeat(Order o, Seat s) / {
            // create a new bill with the provided order and seat; if the provided seat is already assigned to
            // another bill for the current order, then the seat is first removed from the other bill and if no seats
            // are left for the bill, the bill is deleted
            RestoApp r = this.getRestoApp();
            
            if(o.hasBills()){
            	List<Bill> bills = o.getBills();
            	
            	for(int i = 0; i<o.getBills().size(); i++){
            		Bill b = o.getBill(i);
            		List<Seat> seats = b.getIssuedForSeats();
            		if(seats.contains(s)){
            			if(b.getIssuedForSeats().size() == 1){
            				b.delete();
            				i=0;
            			}else{
            				b.removeIssuedForSeat(s);
            				i=0;
            			}
            		}
            	}
            }
            new Bill(o, r, s);
         } -> Ordered;
         addToBill(Bill b, Seat s) / {
            // add provided seat to provided bill unless seat has already been added, in which case nothing needs
            // to be done; if the provided seat is already assigned to another bill for the current order, then the
            // seat is first removed from the other bill and if no seats are left for the bill, the bill is deleted
           	List<Seat> seats = b.getIssuedForSeats();
           	
           	          	if(!seats.contains(s)){
           		Table table = s.getTable();
           		List<Order> orders = table.getOrders();
           		int size = orders.size();
           		Order o = orders.get(size-1);
           		
           		if(o.hasBills()){
                	for(int i = 0; i<o.getBills().size(); i++){
                		Bill bill = o.getBill(i);
                		List<Seat> seat = bill.getIssuedForSeats();
                		if(seat.contains(s)){
                			if(bill.getIssuedForSeats().size() == 1){
                				bill.delete();
                				i=0;
                			}else{
                				bill.removeIssuedForSeat(s);
                				i=0;
                			}
                		}
                	}
		}
           }
           	b.addIssuedForSeat(s);
         } -> Ordered;
         endOrder(Order o) [allSeatsBilled()] / {
         } -> Available;
      }
   }
   
   // check that the provided quantity is an integer greater than 0
   private boolean quantityIsPositive(int quantity) {
      if(quantity>0)
        return true;
      return false;
   }

   // check that the provided order item is the last item of the current order of the table
   private boolean iIsLastItem(OrderItem i) {
        Order aOrder = orders.get(orders.size()-1);
        return aOrder.getOrderItem(aOrder.numberOfOrderItems()-1).equals(i);
   }

   // check that all seats of the table have a bill that belongs to the current order of the table 
   private boolean allSeatsBilled() {
      boolean result =false;
      for(Seat seat : seats){
          List<Bill> bills = seat.getBills();
          for(Bill bill : bills){
              if(!orders.contains(bill.getOrder()))
                return false;
          }
      }
      return true;
   }

}
